#!/bin/bash

readonly PROG_DIR=$(readlink -m $(dirname $0))
readonly PID_FILE=$PROG_DIR/asch.pid

function read_port() {
  echo `cat $PROG_DIR/config.json |grep '"port"'|head -n 1| awk -F "[:,]" '{print$2}'|tr -d ' '`
}

function is_running() {
  test -f $PID_FILE && ps -p $(cat $PID_FILE) > /dev/null
}

function status() {
  if is_running; then
    echo "Asch server is running"
  else
    echo "Asch server is not running"
  fi
}

function start() {
  res=`cat /etc/ntp.conf  | egrep -v '#' | egrep 'pool.ntp.org'`
  echo $res
  if [ "$res" != "server pool.ntp.org prefer" ];then
    configure
  fi
  if is_running; then
    echo "Asch server is already started"
  else
    rm -f $PROG_DIR/asch.pid
    node $PROG_DIR/app.js --base $PROG_DIR --daemon $@
  fi
}

function stop() {
  local pid
  if test -f $PID_FILE; then
    pid=$(cat $PID_FILE)
  fi
  if [ -n "$pid" ] && ps -p "$pid" > /dev/null; then
    kill $pid
    sleep 1
    i=1
    while ps -p $pid > /dev/null; do
      if [ $i == 5 ]; then
        kill -9 $pid
        echo "Asch server killed"
      fi
      echo "Still waiting for asch server to stop ..."
      sleep 1
      ((i++))
    done
    echo "Asch server stopped"
  else
    echo "Asch server is not running"
  fi
  rm -f $PID_FILE
}

function restart() {
  stop
  start
}

function rebuild() {
  echo "Downloading blockchain snapshot..."
  local snapshotName="blockchain-testnet-snapshot"
  wget https://www.asch.so/downloads/$snapshotName.tar.gz
  stop
  tar zxf $snapshotName.tar.gz
  rm $snapshotName.tar.gz
  mv ./$snapshotName.db $PROG_DIR/blockchain.db
  start
}

function reindex() {
  stop
  start --reindex
}

function version() {
  node $PROG_DIR/app.js --version
}

function check_os() {
	os_num=`cat /etc/os-release | grep '\"Ubuntu\"'  | wc -l`
	if [ $os_num -ne 1 ];then
		echo "Linux is not Ubuntu, please configure manually!" && exit 1
	fi
}

function configure() {
  check_os
  sudo $PROG_DIR/init/install_deps.sh
  sudo $PROG_DIR/init/config_ntp.sh
  # sudo $PROG_DIR/init/config_monitor.sh
}

function upgrade() {
  local latestName="asch-linux-latest-testnet"
  mkdir -p tmp
  wget https://www.asch.so/downloads/$latestName.tar.gz -O tmp/$latestName.tar.gz
  if [ $? -ne 0 ]; then
    rm -f tmp/$latestName.tar.gz
    echo "Failed to download the latest version!"
    exit 1
  fi
  echo "Extracting new package ..."
  tar zxf tmp/$latestName.tar.gz -C tmp/
  local extractedDir=`find tmp -maxdepth 1 -type d | grep asch |head -n 1`
  local currentVersion=`version`
  local newVersion=`$extractedDir/aschd version`
  stop
  echo "Copying new files ..."
  for file in `ls $extractedDir`
  do
    if [ "$file" != "config.json" -a "$file" != "blockchain.db" ]; then
      echo "copy $extractedDir/$file ..."
      cp -r $extractedDir/$file $PROG_DIR/
    fi
  done
  rm -rf $extractedDir tmp/$latestName.tar.gz
  echo "Upgrade to $newVersion done."
}

function enable() {
  local secret="$@"
  local port=`read_port`
  curl -k -H "Content-Type: application/json" -X POST -d '{"secret":"'"$secret"'"}' localhost:$port/api/delegates/forging/enable
}

function main() {
  export PATH=$PROG_DIR/bin:$PATH
  eval $@
}

main $@